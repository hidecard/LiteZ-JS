Here’s a detailed **English version** of the README for LiteZ.js.  

---

# LiteZ.js - Lightweight JavaScript Framework  

LiteZ.js is a **lightweight JavaScript framework** that provides **component-based UI rendering**, **reactive state management**, **routing system**, **middleware support**, **event handling**, and **database integration (SQL, NoSQL, Firebase)**.  

⚡ **Key Features**  
- Component-based architecture (ZJS file support)  
- Virtual DOM rendering  
- Reactive State Management  
- Routing system with middleware support  
- SQL, NoSQL, Firebase Realtime Database integration  
- Event-driven architecture  
- Theme management  
- Plugin system for extendability  

---

## 🚀 Installation

LiteZ.js can be included via **CDN**:  
```html
<script src="path/to/LiteZ.js"></script>
```
Or imported directly in your project:  
```js
import LiteZ from './LiteZ.js';
```

---

## 🎯 Quick Start

### 1️⃣ **Component Creation & Rendering**  
LiteZ.js supports **component-based UI rendering**. To create and render a component:  

```js
LiteZ.createComponent('MyComponent', {
  template: () => `<div>{{ message }}</div>`,
  setup: () => {
    const state = LiteZ.createState({ message: 'Hello LiteZ!' });
    return { state };
  },
});

// Render Component
LiteZ.vRender('MyComponent', {}, '#app');
```

📌 **Explanation:**  
- `createComponent(name, { template, setup })` → Registers a new component.  
- `vRender(name, props, target)` → Renders the component inside the specified DOM element.  
- `createState(initialState)` → Creates a reactive state for the component.  

---

## 🏗️ **State Management**

LiteZ.js supports **Reactive State Management**.  
```js
const counter = LiteZ.createState({ count: 0 });

// Subscribe to state changes
counter.subscribe((newState) => console.log('Updated State:', newState));

// Update state
counter.set({ count: counter.get('count') + 1 });
```

📌 **Explanation:**  
- `createState(initialValue)` → Creates a reactive state.  
- `state.get(key)` → Retrieves the state value.  
- `state.set(newValue)` → Updates the state.  
- `state.subscribe(callback)` → Listens for state changes.  

---

## 🌍 **Routing System**
LiteZ.js includes a **router system** that is useful for **single-page applications (SPA)**.  

```js
const routes = {
  '/': { component: 'Home' },
  '/about': { component: 'About' },
};

// Initialize router
LiteZ.router(routes);
```

📌 **Explanation:**  
- `LiteZ.router(routes)` → Initializes the routing system.  
- The `routes` object defines paths and associated components.  

---

## 🔄 **Middleware Integration**  
Middleware can be used to control navigation behavior.  

```js
LiteZ.useGlobalMiddleware(async ({ path }) => {
  if (path === '/dashboard' && !user.isAuthenticated) {
    return '/login'; // Redirect to login
  }
});
```

📌 **Explanation:**  
- `useGlobalMiddleware(middleware)` → Defines a global middleware.  
- Middleware can control **authentication**, **permissions**, **logging**, etc.  

---

## 💾 **Database Integrations**  
LiteZ.js supports **SQL, NoSQL, and Firebase Realtime Database**.  

### 1️⃣ **IndexedDB (SQL-like)**  
```js
LiteZ.initSQL({ name: 'AppDB', stores: { users: { keyPath: 'id' } } });

LiteZ.sqlAction('users', 'add', { value: { id: 1, name: 'John' } });
```
- `initSQL()` → Initializes an IndexedDB (SQL-like) database.  
- `sqlAction(store, action, data)` → Performs CRUD operations on IndexedDB.  

---

### 2️⃣ **LocalStorage (NoSQL)**  
```js
LiteZ.initNoSQL();

LiteZ.noSQLAction('settings', 'put', { key: 'theme', value: 'dark' });
```
- `initNoSQL()` → Initializes LocalStorage (NoSQL).  
- `noSQLAction(collection, action, data)` → Performs CRUD operations on NoSQL storage.  

---

### 3️⃣ **Firebase Realtime Database**  
```js
LiteZ.initFirebase({ config: firebaseConfig });

LiteZ.firebaseAction('users', 'add', { value: { name: 'John Doe' } });
```
- `initFirebase()` → Initializes Firebase Realtime Database.  
- `firebaseAction(path, action, data)` → Performs CRUD operations on Firebase.  

---

## 🎨 **Theming System**
```js
LiteZ.initTheme({
  defaultTheme: 'light',
  styles: {
    dark: { '--bg-color': '#222', '--text-color': '#fff' },
    light: { '--bg-color': '#fff', '--text-color': '#000' },
  },
});

// Switch theme
LiteZ.setTheme('dark');
```
📌 **Explanation:**  
- `initTheme({ defaultTheme, styles })` → Initializes the theme system.  
- `setTheme(theme)` → Switches between **dark/light** modes.  

---

## 🔌 **Plugin System**
LiteZ.js supports **plugin integration**.  
```js
const myPlugin = (app) => {
  app.customFunction = () => console.log('Custom Plugin Loaded!');
};

LiteZ.usePlugin(myPlugin);
LiteZ.customFunction();
```

📌 **Explanation:**  
- `usePlugin(plugin)` → Extends LiteZ.js functionality with custom plugins.  

---

## 📢 **Event Handling (Event Bus)**
```js
LiteZ.on('user-logged-in', (user) => console.log('User:', user));

LiteZ.emit('user-logged-in', { name: 'John Doe' });
```

📌 **Explanation:**  
- `on(event, callback)` → Registers an event listener.  
- `emit(event, payload)` → Triggers an event.  
- `off(event, callback)` → Removes an event listener.  

---

## 🔐 **Authentication**
LiteZ.js provides built-in authentication system support.  

```js
const auth = LiteZ.createAuth();

// Login
auth.login({ email: 'test@example.com', password: '123456' });

// Logout
auth.logout();
```

📌 **Explanation:**  
- `createAuth()` → Initializes the authentication system.  
- `auth.login(credentials)` → Logs in a user.  
- `auth.logout()` → Logs out a user.  

---

## 📜 **License**
LiteZ.js is released under the **MIT License**.  

---

📌 **Developer Notes:**  
LiteZ.js is continuously improving. Feel free to **report issues** or **suggest enhancements**. 🚀  

---

This **detailed README** provides a **comprehensive**, **easy-to-understand**, and **beginner-friendly** guide to LiteZ.js.  
Let me know if you need further improvements! 🚀🔥