### `LiteZ` ရဲ့ Features တွေကို ဥပမာနဲ့ ရှင်းပြချက်

#### ၁. Component Management
- **ဘာလဲ?**: ဒီအင်္ဂါရပ်က UI အစိတ်အပိုင်းတွေကို သီးသန့်ဖန်တီးပြီး ပြန်သုံးလို့ရအောင် လုပ်ပေးတယ်။ `.zjs` ဖိုင်တွေကနေ ဖန်တီးလို့လည်းရတယ်။
- **ဘာကြောင့်အသုံးဝင်လဲ?**: Button တစ်ခု၊ Card တစ်ခုလို အရာတွေကို တစ်နေရာထဲမှာ ဖန်တီးပြီး အနှံ့သုံးလို့ရတယ်။
- **ဥပမာ**:
  ```html
  <!-- app.zjs -->
  <template>
    <button>{{ text }}</button>
  </template>
  <script>
  () => ({
    data: () => ({ text: "Click Me" })
  })
  </script>
  ```
  - ဒီလို `.zjs` ဖိုင်ကနေ button တစ်ခု ဖန်တီးပြီး၊ အောက်မှာ သုံးလို့ရတယ်။
  ```javascript
  LiteZ.createComponentFromFile('app.zjs', 'MyButton');
  LiteZ.vRender('MyButton', {}, '#app');
  ```
  - ရလဒ်: Browser မှာ `<button>Click Me</button>` ပေါ်မယ်။

#### ၂. State Management
- **ဘာလဲ?**: Data တွေကို စီမံပြီး အပြောင်းအလဲရှိရင် UI ကို အလိုလိုပြောင်းပေးတယ်။
- **ဘာကြောင့်အသုံးဝင်လဲ?**: ဥပမာ၊ count တစ်ခု တိုးသွားရင် မျက်နှာပြင်မှာ ချက်ချင်းပြောင်းပြမယ်။
- **ဥပမာ**:
  ```javascript
  const state = LiteZ.createState({ count: 0 });
  state.subscribe((data) => {
    document.getElementById('app').innerHTML = `Count: ${data.count}`;
  });
  state.set({ count: 1 });
  ```
  - ရလဒ်: "Count: 0" ကနေ "Count: 1" အဖြစ် ပြောင်းသွားမယ်။

#### ၃. Reactive Refs
- **ဘာလဲ?**: တစ်ခုတည်းတဲ့ ဒေတာကို အလွယ်တကူ စီမံပေးတယ်။
- **ဘာကြောင့်အသုံးဝင်လဲ?**: ရိုးရှင်းတဲ့ တန်ဖိုး (ဥပမာ၊ နာမည်) တစ်ခုကို ပြောင်းလို့ရတယ်။
- **ဥပမာ**:
  ```javascript
  const name = LiteZ.createRef('Mg Mg');
  name.subscribe((data) => {
    document.getElementById('app').innerHTML = `Hello, ${data.value}`;
  });
  name.value = 'Aung Aung';
  ```
  - ရလဒ်: "Hello, Mg Mg" က "Hello, Aung Aung" ဖြစ်သွားမယ်။

#### ၄. Hooks (useEffect)
- **ဘာလဲ?**: ဒေတာပြောင်းရင် အလိုလို လုပ်ဆောင်မှုတွေ လုပ်ပေးတယ်။
- **ဘာကြောင့်အသုံးဝင်လဲ?**: ဥပမာ၊ ဒေတာပြောင်းတိုင်း သတိပေးချက် ပြလို့ရတယ်။
- **ဥပမာ**:
  ```javascript
  const state = LiteZ.createState({ count: 0 });
  LiteZ.useEffect(() => {
    console.log('Count is now:', state.get('count'));
  }, () => [state.get('count')]);
  state.set({ count: 1 });
  ```
  - ရလဒ်: Console မှာ "Count is now: 0" ပြီးရင် "Count is now: 1" ပြမယ်။

#### ၅. Global Store
- **ဘာလဲ?**: App တစ်ခုလုံးအတွက် ဒေတာကို တစ်နေရာတည်းမှာ သိမ်းပေးတယ်။
- **ဘာကြောင့်အသုံးဝင်လဲ?**: ဥပမာ၊ ဈေးခြင်းထဲက ပစ္စည်းတွေကို နေရာအနှံ့ သုံးလို့ရတယ်။
- **ဥပမာ**:
  ```javascript
  const store = LiteZ.createStore({
    state: { items: 0 },
    mutations: {
      add(state) { state.set({ items: state.get('items') + 1 }); }
    }
  });
  store.commit('add');
  console.log(store.state.get('items')); // 1
  ```

#### ၆. Routing
- **ဘာလဲ?**: စာမျက်နှာတွေကို လမ်းကြောင်းခွဲပြီး ပြပေးတယ်။
- **ဘာကြောင့်အသုံးဝင်လဲ?**: `/home` နဲ့ `/about` လို စာမျက်နှာတွေ ခွဲလို့ရတယ်။
- **ဥပမာ**:
  ```javascript
  LiteZ.createComponent('Home', { template: () => '<h1>Home</h1>' });
  LiteZ.router({ '/': { component: 'Home' } });
  ```
  - ရလဒ်: Browser မှာ `/` သွားရင် "Home" ပြမယ်။

#### ၇. Virtual DOM Rendering
- **ဘာလဲ?**: UI ကို မြန်မြန်ပြောင်းပေးဖို့ virtual DOM သုံးတယ်။
- **ဘာကြောင့်အသုံးဝင်လဲ?**: ပြောင်းလဲမှုအနည်းငယ်ကိုပဲ update လုပ်လို့ မြန်တယ်။
- **ဥပမာ**:
  ```javascript
  LiteZ.createComponent('Counter', {
    template: (props) => `<div>${props.state.get('count')}</div>`,
    setup: () => ({ state: LiteZ.createState({ count: 0 }) })
  });
  const state = LiteZ.vRender('Counter', {}, '#app');
  state.set({ count: 1 });
  ```
  - ရလဒ်: "0" ကနေ "1" အဖြစ် ပြောင်းမယ်။

#### ၈. Event Bus
- **ဘာလဲ?**: အစိတ်အပိုင်းတွေကြား သတင်းပို့လို့ရတယ်။
- **ဘာကြောင့်အသုံးဝင်လဲ?**: ဥပမာ၊ ခလုတ်နှိပ်ရင် တခြားနေရာကို သတိပေးလို့ရတယ်။
- **ဥပမာ**:
  ```javascript
  LiteZ.on('click', () => console.log('Button clicked!'));
  LiteZ.emit('click');
  ```
  - ရလဒ်: Console မှာ "Button clicked!" ပြမယ်။

#### ၉. Internationalization (i18n)
- **ဘာလဲ?**: ဘာသာစကားမျိုးစုံ ပြလို့ရတယ်။
- **ဘာကြောင့်အသုံးဝင်လဲ?**: မြန်မာလို၊ အင်္ဂလိပ်လို ပြောင်းပြလို့ရတယ်။
- **ဥပမာ**:
  ```javascript
  LiteZ.initI18n({
    locale: 'my',
    translations: { my: { hello: 'မင်္ဂလာပါ' }, en: { hello: 'Hello' } }
  });
  console.log(LiteZ.t('hello')); // မင်္ဂလာပါ
  ```

#### ၁၀. Themes
- **ဘာလဲ?**: အသွင်အပြင် (theme) ပြောင်းလို့ရတယ်။
- **ဘာကြောင့်အသုံးဝင်လဲ?**: Light/Dark mode လို ပြောင်းလို့ရတယ်။
- **ဥပမာ**:
  ```javascript
  LiteZ.initTheme({
    defaultTheme: 'dark',
    styles: { dark: { '--bg': '#333' } }
  });
  LiteZ.setTheme('dark');
  ```
  - ရလဒ်: Background က မဲနေမယ်။

#### ၁၁. Forms
- **ဘာလဲ?**: Form တွေကို လွယ်လွယ်ဖန်တီးပြီး စစ်ဆေးလို့ရတယ်။
- **ဘာကြောင့်အသုံးဝင်လဲ?**: Login form လို အရာတွေ လွယ်ကူစွာ လုပ်လို့ရတယ်။
- **ဥပမာ**:
  ```javascript
  const form = LiteZ.createForm({ name: '' }, { name: { required: true } });
  form.submit((values) => console.log(values));
  ```

#### ၁၂. Animations
- **ဘာလဲ?**: အရာဝတ္ထုတွေကို လှုပ်ရှားမှု ထည့်ပေးလို့ရတယ်။
- **ဘာကြောင့်အသုံးဝင်လဲ?**: ခလုတ်တွေ ဖြည်းဖြည်းပေါ်လာအောင် လုပ်လို့ရတယ်။
- **ဥပမာ**:
  ```javascript
  LiteZ.animate('#button', [{ opacity: 0 }, { opacity: 1 }], { duration: 1000 });
  ```

#### ၁၃. Database Integration
- **ဘာလဲ?**: ဒေတာတွေကို IndexedDB၊ localStorage၊ Firebase စတဲ့နေရာတွေမှာ သိမ်းလို့ရတယ်။
- **ဘာကြောင့်အသုံးဝင်လဲ?**: သုံးသူဒေတာတွေ သိမ်းထားလို့ရတယ်။
- **ဥပမာ**:
  ```javascript
  LiteZ.initNoSQL();
  LiteZ.noSQLAction('users', 'add', { key: '1', value: 'Mg Mg' });
  ```

#### ၁၄. Plugins & Middleware
- **ဘာလဲ?**: အပိုလုပ်ဆောင်ချက်တွေ ထည့်လို့ရတယ်။
- **ဘာကြောင့်အသုံးဝင်လဲ?**: ဥပမာ၊ login မလုပ်ရင် စာမျက်နှာ မပြအောင် လုပ်လို့ရတယ်။
- **ဥပမာ**:
  ```javascript
  LiteZ.useMiddleware((ctx) => console.log('Navigating to:', ctx.path));
  ```

#### ၁၅. Pre-built Modules
- **ဘာလဲ?**: Cart၊ Social၊ Dashboard၊ Auth လို အသင့်သုံးလို့ရတဲ့ အစိတ်အပိုင်းတွေ ပါတယ်။
- **ဘာကြောင့်အသုံးဝင်လဲ?**: ဈေးခြင်း စတင်ဖို့ အလွယ်တကူ လုပ်လို့ရတယ်။
- **ဥပမာ**:
  ```javascript
  const cart = LiteZ.createCart();
  cart.addItem({ id: 1, price: 100 });
  console.log(cart.getCart().total); // 100
  ```

#### ၁၆. Computed Properties
- **ဘာလဲ?**: ဒေတာကနေ အလိုလို တွက်ထုတ်ပေးတယ်။
- **ဘာကြောင့်အသုံးဝင်လဲ?**: ဈေးခြင်းထဲက စုစုပေါင်းကို ချက်ချင်းရတယ်။
- **ဥပမာ**:
  ```javascript
  const state = LiteZ.createState({ price: 100 });
  const total = LiteZ.createComputed(state, () => state.get('price') * 2);
  console.log(total.get()); // 200
  ```

#### ၁၇. Directives
- **ဘာလဲ?**: HTML ထဲမှာ အမိန့်တွေ ထည့်ပြီး ထိန်းလို့ရတယ်။
- **ဘာကြောင့်အသုံးဝင်လဲ?**: ဥပမာ၊ အကွက်တစ်ခု ပြမပြ ထိန်းလို့ရတယ်။
- **ဥပမာ**:
  ```html
  <div data-z-show="state.get('show')">Hello</div>
  ```

---

### GitHub အတွက် README.md
အခု ဒီအင်္ဂါရပ်တွေကို Markdown ဖော်မတ်နဲ့ ပြောင်းပြီး `README.md` အနေနဲ့ ရေးပေးမယ်။

```markdown
# LiteZ Framework

`LiteZ` က ပေါ့ပါးပြီး အစွမ်းထက်တဲ့ JavaScript framework တစ်ခုပါ။ အောက်မှာ ပါတဲ့ အင်္ဂါရပ်တွေကို ဥပမာနဲ့ ရှင်းပြထားပါတယ်။

## Features

### 1. Component Management
UI အစိတ်အပိုင်းတွေကို သီးသန့် ဖန်တီးပြီး ပြန်သုံးလို့ရတယ်။
```html
<!-- app.zjs -->
<template><button>{{ text }}</button></template>
<script>(() => ({ data: () => ({ text: "Click Me" }) }))</script>
```
```javascript
LiteZ.createComponentFromFile('app.zjs', 'MyButton');
LiteZ.vRender('MyButton', {}, '#app');
```

### 2. State Management
ဒေတာပြောင်းရင် UI ကို အလိုလို ပြောင်းပေးတယ်။
```javascript
const state = LiteZ.createState({ count: 0 });
state.subscribe((data) => document.getElementById('app').innerHTML = `Count: ${data.count}`);
state.set({ count: 1 });
```

### 3. Reactive Refs
တစ်ခုတည်းတဲ့ ဒေတာကို လွယ်လွယ် စီမံလို့ရတယ်။
```javascript
const name = LiteZ.createRef('Mg Mg');
name.subscribe((data) => document.getElementById('app').innerHTML = `Hello, ${data.value}`);
name.value = 'Aung Aung';
```

### 4. Hooks (useEffect)
ဒေတာပြောင်းရင် လုပ်ဆောင်မှု ထည့်လို့ရတယ်။
```javascript
const state = LiteZ.createState({ count: 0 });
LiteZ.useEffect(() => console.log('Count:', state.get('count')), () => [state.get('count')]);
state.set({ count: 1 });
```

### 5. Global Store
App တစ်ခုလုံးအတွက် ဒေတာ သိမ်းလို့ရတယ်။
```javascript
const store = LiteZ.createStore({
  state: { items: 0 },
  mutations: { add(state) { state.set({ items: state.get('items') + 1 }); } }
});
store.commit('add');
```

### 6. Routing
စာမျက်နှာတွေကို လမ်းကြောင်းခွဲပြီး ပြလို့ရတယ်။
```javascript
LiteZ.createComponent('Home', { template: () => '<h1>Home</h1>' });
LiteZ.router({ '/': { component: 'Home' } });
```

### 7. Virtual DOM Rendering
UI ကို မြန်မြန် ပြောင်းပေးတယ်။
```javascript
LiteZ.createComponent('Counter', {
  template: (props) => `<div>${props.state.get('count')}</div>`,
  setup: () => ({ state: LiteZ.createState({ count: 0 }) })
});
LiteZ.vRender('Counter', {}, '#app');
```

## Installation
```bash
npm install litez
npx litez init my-app
cd my-app
npx litez build
npx serve dist
```

## License
MIT
```

---

### ဘာကြောင့် ဒီလိုရေးတာလဲ?
- **နားလည်လွယ်အောင်**: ရိုးရှင်းတဲ့ ဥပမာတွေနဲ့ ဘာလုပ်လို့ရလဲ ရှင်းပြထားတယ်။
- **အသုံးပြုလွယ်အောင်**: Install လုပ်နည်းနဲ့ စမ်းသပ်နည်းကို ထည့်ထားတယ်။
- **တိုတိုနဲ့ ပြည့်စုံအောင်**: အင်္ဂါရပ်အားလုံးကို ထည့်ပြီး အရှည်မကြီးအောင် ရေးထားတယ်။

GitHub မှာ ဒီ `README.md` ကို သုံးရင် သင့် `LiteZ` ကို လူတိုင်းနားလည်ပြီး စမ်းသုံးချင်လာမယ်။ ဘယ်နေရာကို ထပ်ပြင်ချင်လဲ ပြောပြပေးပါနော်!